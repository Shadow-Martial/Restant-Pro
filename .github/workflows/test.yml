name: Run Tests

on:
  pull_request:
    branches: [ main, staging ]
  push:
    branches: [ main, staging ]

env:
  PHP_VERSION: '8.1'
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, json, zip
          coverage: xdebug

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install Composer dependencies
        run: |
          echo "Checking composer.json and composer.lock compatibility..."
          
          # Try to install first, if it fails due to lock file issues, update
          if composer install --prefer-dist --no-interaction --dry-run 2>&1 | grep -q "lock file is not up to date\|not present in the lock file"; then
            echo "⚠️  Composer lock file is outdated, updating dependencies..."
            echo "This will update composer.lock to match composer.json"
            
            # Update dependencies to match composer.json
            composer update --prefer-dist --no-interaction --verbose
            
            echo "✅ Dependencies updated successfully"
          else
            echo "✅ Installing dependencies from existing lock file..."
            composer install --prefer-dist --no-interaction --verbose
          fi
          
          # Optimize autoloader
          composer dump-autoload --optimize

      - name: Install NPM dependencies
        run: |
          npm install
          npm list --depth=0 || true

      - name: Validate Environment
        run: |
          echo "PHP Version: $(php --version)"
          echo "Composer Version: $(composer --version)"
          echo "Node Version: $(node --version)"
          echo "NPM Version: $(npm --version)"
          
          # Check if required files exist
          echo "Checking required files..."
          ls -la
          
          if [ ! -f "composer.json" ]; then
            echo "ERROR: composer.json not found"
            exit 1
          fi
          
          if [ ! -f "package.json" ]; then
            echo "ERROR: package.json not found"
            exit 1
          fi

      - name: Prepare Laravel Application
        run: |
          # Create .env file from .env.testing if it exists, otherwise from .env.example
          if [ -f .env.testing ]; then
            echo "Using .env.testing file"
            cp .env.testing .env
          elif [ -f .env.example ]; then
            echo "Using .env.example file"
            cp .env.example .env
            # Set testing environment variables
            sed -i 's/APP_ENV=.*/APP_ENV=testing/' .env
            sed -i 's/DB_CONNECTION=.*/DB_CONNECTION=mysql/' .env
            sed -i 's/DB_HOST=.*/DB_HOST=127.0.0.1/' .env
            sed -i 's/DB_PORT=.*/DB_PORT=3306/' .env
            sed -i 's/DB_DATABASE=.*/DB_DATABASE=testing/' .env
            sed -i 's/DB_USERNAME=.*/DB_USERNAME=root/' .env
            sed -i 's/DB_PASSWORD=.*/DB_PASSWORD=password/' .env
          else
            echo "ERROR: Neither .env.testing nor .env.example found"
            exit 1
          fi
          
          # Generate application key
          php artisan key:generate --force
          
          # Clear and cache configuration
          php artisan config:clear
          php artisan config:cache
          
          # Wait for MySQL to be ready and test connection
          echo "Testing database connection..."
          for i in {1..30}; do
            if mysqladmin ping -h127.0.0.1 -P3306 -uroot -ppassword --silent; then
              echo "MySQL is ready"
              break
            fi
            echo "Waiting for MySQL to be ready... ($i/30)"
            sleep 2
          done
          
          # Test Laravel database connection
          php artisan migrate:status || echo "Migration status check failed, but continuing..."
          
          # Run migrations if they exist
          if [ -d "database/migrations" ] && [ "$(ls -A database/migrations)" ]; then
            echo "Running migrations..."
            php artisan migrate --force
          else
            echo "No migrations found, skipping migration step"
          fi

      - name: Run PHP tests
        run: |
          # Check if phpunit.xml exists, if not use default Laravel testing
          if [ -f phpunit.xml ]; then
            echo "Running PHPUnit with phpunit.xml configuration"
            vendor/bin/phpunit --coverage-clover coverage.xml --verbose
          else
            echo "Running Laravel Artisan test command"
            php artisan test --coverage --coverage-clover coverage.xml
          fi

      - name: Build assets
        run: npm run production

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella